{"version":3,"sources":["hoc/withAuthRedirect.js","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","className","s","descriptionBlock","src","photos","large","Preloader","Post","posts","item","alt","message","likesCount","maxLength10","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","name","validate","required","MyPosts","memo","postsElements","reverse","map","p","createRef","postsBlock","values","addPost","newPostText","MyPostsContainer","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","match","params","authorizedUserId","history","push","getUserProfile","getStatus","compose","withRouter"],"mappings":"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","file":"static/js/3.43ca8f9b.chunk.js","sourcesContent":["import React, {Component} from \"react\";\n// import Redirect from \"react-router-dom/es/Redirect\";\nimport {connect} from \"react-redux\";\nimport {Redirect} from \"react-router-dom\";\n\n\n\nlet mapStateToPropsForRedirect = (state) => ({\n    isAuth: state.auth.isAuth\n});\n\nexport const withAuthRedirect = (Component) => {\n    class RedirectComponent extends React.Component{\n        render() {\n            if (!this.props.isAuth) return <Redirect to={\"/login\"}/>\n            return <Component {...this.props}/>\n\n        }\n    }\n\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent)\n\n\n    return ConnectedAuthRedirectComponent;\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3cd8Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2ifKf\",\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\"};","import React from \"react\";\n\n\nclass ProfileStatus extends React.Component {\n    state = {\n        editMode: false,\n        status: this.props.status\n    }\n    activateEditMode = () => {\n        this.setState({\n            editMode: true\n        })\n    }\n\n\n    deactivateEditMode = () => {\n        this.setState({\n            editMode: false\n        })\n        this.props.updateStatus(this.state.status);\n    }\n\n    onStatusChange = (e) => {\n        this.setState({\n            status: e.currentTarget.value\n        });\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.status !== this.props.status) {\n            this.setState({\n                status: this.props.status\n            })\n        }\n        console.log('componentDidUpdate')\n    }\n\n\n    render() {\n        return (\n            <div>\n                {!this.state.editMode &&\n                <div>\n                    <span onDoubleClick={this.activateEditMode}>{this.props.status || '----'}</span>\n                </div>\n                }\n                {this.state.editMode &&\n                <div>\n                    <input onChange={this.onStatusChange} autoFocus={true} onBlur={this.deactivateEditMode}\n                           value={this.state.status}/>\n                </div>\n                }\n\n            </div>\n        )\n    }\n}\n\n\nexport default ProfileStatus;\n","import React, {useEffect, useState} from \"react\";\n\n\nconst ProfileStatusWithHooks = (props) => {\n\n    let [editMode, setEditMode] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    useEffect( () => {\n        setStatus(props.status);\n    }, [props.status]);\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false)\n\n        props.updateStatus(status)\n    }\n\n    const onStatusChange = (e) => {\n        setStatus(e.currentTarget.value);\n    }\n\n    return (\n        <div>\n            {!editMode &&\n                <div>\n                    <span onDoubleClick={activateEditMode}>{props.status || '----'}</span>\n                </div>\n            }\n            {editMode &&\n            <div>\n                <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status}/>\n            </div>\n            }\n\n        </div>\n    )\n\n}\n\n\nexport default ProfileStatusWithHooks;\n","import React from \"react\";\nimport s from './ProfileInfo.module.css';\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport ProfileStatus from \"./ProfileStatus\"\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\n\nconst ProfileInfo = ({profile, status, updateStatus}) => {\n\n    if (!profile) {\n        return <Preloader/>\n    }\n    return (\n        <div>\n            <div className={s.descriptionBlock}>\n                <img src={profile.photos.large}/>\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\n            </div>\n        </div>\n\n    )\n}\nexport default ProfileInfo;\n","import React from \"react\";\nimport s from './Post.module.css';\n\nconst Post = (props) => {\n    return (\n        <div className={s.posts}>\n            <div className={s.item}>\n                <img src=\"https://img.icons8.com/pastel-glyph/2x/wine-glass.png\" alt=\"\"/>\n                {props.message}\n                <div>\n                    <span>Like</span>\n                    {props.likesCount}\n                </div>\n            </div>\n        </div>)\n}\nexport default Post;\n","import React from \"react\";\nimport s from './MyPosts.module.css';\nimport Post from \"./Post/Post\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\n\n\nconst maxLength10 =  maxLengthCreator(10)\n\nlet AddNewPostForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={Textarea} placeholder={'post message'} name='newPostText' validate={[required, maxLength10]}/>\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n\n    )\n\n}\n\nlet AddNewPostFormRedux = reduxForm({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\n\n\nconst MyPosts = React.memo (props => {\n\n    let postsElements = [...props.posts]\n        .reverse()\n        .map(p => <Post message={p.message} likesCount={p.likesCount}/>);\n    let newPostElement = React.createRef();\n\n    let onAddPost = (values) => {\n        props.addPost(values.newPostText);\n    }\n\n    return <div className={s.postsBlock}>\n        <h3>my posts</h3>\n\n        <AddNewPostFormRedux onSubmit={onAddPost}/>\n\n        <div className={s.posts}>\n            {postsElements}\n        </div>\n    </div>\n});\n\nexport default MyPosts;\n","import React from \"react\";\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\n\n\nconst mapStateToProps = (state) => {\n    return {\n        posts: state.profilePage.posts,\n        newPostText: state.profilePage.newPostText\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n\n        addPost: (newPostText) => {\n            dispatch(addPostActionCreator(newPostText));\n        }\n    }\n};\n\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\nexport default MyPostsContainer;\n","import React from \"react\";\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\n\n\nconst Profile = (props) => {\n    return <div>\n        <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\n        <MyPostsContainer />\n\n    </div>\n}\nexport default Profile;\n","import React from \"react\";\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getStatus, getUserProfile, updateStatus} from \"../../redux/profile-reducer\";\nimport {withRouter} from \"react-router-dom\"\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n\n\nclass ProfileContainer extends React.Component {\n    componentDidMount() {\n        let userId = this.props.match.params.userId;\n\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n            if (!userId) {\n                this.props.history.push('/login')\n            }\n        }\n        this.props.getUserProfile(userId);\n        this.props.getStatus(userId);\n\n\n\n    }\n\n    render() {\n\n        return (\n            <Profile {...this.props}\n                     profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus}/>\n        )\n    }\n}\n\nlet mapStateToProps = (state) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth\n});\n\nexport default compose(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\n    withRouter,\n    // withAuthRedirect\n)(ProfileContainer)\n\n\n"],"sourceRoot":""}