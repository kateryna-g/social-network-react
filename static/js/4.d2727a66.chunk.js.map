{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.js","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/AddMessageForm/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","DialogItem","path","id","className","s","dialog","active","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","dialogsPage","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","newMessageBody","dialogsItems","values","sendMessage","compose","dispatch","sendMessageCreator"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,uICM9KC,EAA6B,SAACC,GAAD,MAAY,CACzCC,OAAQD,EAAME,KAAKD,SAGVE,EAAmB,SAACC,GAAe,IACtCC,EADqC,uKAGnC,OAAKC,KAAKC,MAAMN,OACT,kBAACG,EAAcE,KAAKC,OADI,kBAAC,IAAD,CAAUC,GAAI,eAHV,GACXC,IAAML,WAYtC,OAHqCM,YAAQX,EAARW,CAAqCL,K,+FCR/DM,EATI,SAACJ,GAChB,IAAIK,EAAO,YAAcL,EAAMM,GAC/B,OACI,yBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QAC/B,kBAAC,IAAD,CAAST,GAAII,GAAOL,EAAMW,QCIvBC,EANC,SAACZ,GACb,OACI,yBAAKO,UAAWC,IAAEK,SAAUb,EAAMa,U,kCCDpCC,EAAcC,YAAiB,IAgBtBC,cAAU,CAACC,KAAM,wBAAjBD,EAdQ,SAAChB,GACpB,OACI,0BAAMkB,SAAUlB,EAAMmB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IACXC,SAAU,CAACC,IAAUV,GACrBH,KAAK,iBAAiBc,YAAY,wBAE7C,6BAAK,6C,QCwBFC,EAhCC,SAAC1B,GAEb,IAAIP,EAAQO,EAAM2B,YAEdC,EAAkBnC,EAAMoC,QAAQC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYpB,KAAMoB,EAAEpB,KAAMqB,IAAKD,EAAEzB,GAAIA,GAAIyB,EAAEzB,QACpF2B,EAAmBxC,EAAMyC,SAASJ,KAAI,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAAStB,QAASsB,EAAEtB,QAASmB,IAAKG,EAAE7B,QAE9Db,EAAM2C,eAM3B,OAAKpC,EAAMN,OAGP,yBAAKa,UAAWC,IAAEqB,SACd,yBAAKtB,UAAWC,IAAE6B,cACbT,GAEL,yBAAKrB,UAAWC,IAAE0B,UACd,iCAAOD,EAAP,MAIJ,kBAAC,EAAD,CAAgBf,SAhBJ,SAACoB,GACjBtC,EAAMuC,YAAYD,EAAOF,oBAGH,kBAAC,IAAD,CAAUnC,GAAI,Y,wBCE7BuC,sBACXrC,aAhBkB,SAACV,GACnB,MAAO,CACHkC,YAAalC,EAAMkC,gBAIF,SAACc,GACtB,MAAO,CACHF,YAAc,SAACH,GACXK,EAASC,YAAmBN,SAQpCxC,IAFW4C,CAGZd","file":"static/js/4.d2727a66.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\"};","import React, {Component} from \"react\";\n// import Redirect from \"react-router-dom/es/Redirect\";\nimport {connect} from \"react-redux\";\nimport {Redirect} from \"react-router-dom\";\n\n\n\nlet mapStateToPropsForRedirect = (state) => ({\n    isAuth: state.auth.isAuth\n});\n\nexport const withAuthRedirect = (Component) => {\n    class RedirectComponent extends React.Component{\n        render() {\n            if (!this.props.isAuth) return <Redirect to={\"/login\"}/>\n            return <Component {...this.props}/>\n\n        }\n    }\n\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent)\n\n\n    return ConnectedAuthRedirectComponent;\n}\n","import React from \"react\";\nimport s from './../Dialogs.module.css';\nimport {NavLink} from \"react-router-dom\";\n\nconst DialogItem = (props) => {\n    let path = '/dialogs/' + props.id\n    return (\n        <div className={s.dialog + ' ' + s.active}>\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n    )\n}\n\nexport default DialogItem;\n","import React from \"react\";\nimport s from './../Dialogs.module.css';\n\n\n\n\nconst Message = (props) => {\n    return (\n        <div className={s.message}>{props.message}</div>\n    )\n}\n\nexport default Message;\n","import {Field, reduxForm} from \"redux-form\";\nimport React from \"react\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\n\n\n\nconst maxLength50 = maxLengthCreator(50)\n\nconst AddMessageForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={Textarea}\n                       validate={[required, maxLength50]}\n                       name='newMessageBody' placeholder='Enter your message'/>\n            </div>\n            <div><button>Send</button></div>\n        </form>\n\n    )\n}\n\nexport default reduxForm({form: 'dialogAddMessageForm'}) (AddMessageForm)\n","import React from \"react\";\nimport s from './Dialogs.module.css';\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\n// import Redirect from \"react-router-dom/es/Redirect\";\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\nimport {Redirect} from \"react-router-dom\";\n\n\nconst Dialogs = (props) => {\n\n    let state = props.dialogsPage;\n\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>);\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id}/>);\n\n    let newMessageBody = state.newMessageBody;\n\n    let addNewMessage = (values) => {\n        props.sendMessage(values.newMessageBody)\n    }\n\n    if (!props.isAuth) return <Redirect to={\"/login\"}/>\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                <div> {messagesElements} </div>\n\n            </div>\n\n            <AddMessageForm onSubmit={addNewMessage}/>\n\n        </div>\n    )\n}\n\n\nexport default Dialogs;\n","import React from \"react\";\nimport {sendMessageCreator} from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogsPage: state.dialogsPage\n    }\n};\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        sendMessage : (newMessageBody) => {\n            dispatch(sendMessageCreator(newMessageBody));\n        }\n    }\n};\n\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n) (Dialogs)\n;\n"],"sourceRoot":""}